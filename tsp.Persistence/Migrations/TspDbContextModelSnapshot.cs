// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using tsp.Persistence.Context;

#nullable disable

namespace tsp.Persistence.Migrations
{
    [DbContext(typeof(TspDbContext))]
    partial class TspDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("tsp.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("CreateDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("CreateTime")
                        .HasColumnType("time");

                    b.Property<DateOnly?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("DeleteTime")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("UpdateDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("UpdateTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Categorie");
                });

            modelBuilder.Entity("tsp.Domain.Entities.Form", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("CreateDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("CreateTime")
                        .HasColumnType("time");

                    b.Property<DateOnly?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("DeleteTime")
                        .HasColumnType("time");

                    b.Property<string>("FormNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("UpdateDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("UpdateTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Forms");
                });

            modelBuilder.Entity("tsp.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("CreateDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("CreateTime")
                        .HasColumnType("time");

                    b.Property<DateOnly?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("DeleteTime")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("UpdateDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("UpdateTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("tsp.Domain.Entities.ProductInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("CreateDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("CreateTime")
                        .HasColumnType("time");

                    b.Property<DateOnly?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("DeleteTime")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("UpdateDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("UpdateTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("ProductInfo");
                });

            modelBuilder.Entity("tsp.Domain.Entities.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("CreateDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("CreateTime")
                        .HasColumnType("time");

                    b.Property<DateOnly?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("DeleteTime")
                        .HasColumnType("time");

                    b.Property<int>("Pieces")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("UpdateDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("UpdateTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("tsp.Domain.Entities.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("CreateDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("CreateTime")
                        .HasColumnType("time");

                    b.Property<DateOnly?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("DeleteTime")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("UpdateDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("UpdateTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategory");
                });

            modelBuilder.Entity("tsp.Domain.Entities.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("CreateDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("CreateTime")
                        .HasColumnType("time");

                    b.Property<DateOnly?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("DeleteTime")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("UpdateDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("UpdateTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("tsp.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("CreateDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("CreateTime")
                        .HasColumnType("time");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DeleteDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("DeleteTime")
                        .HasColumnType("time");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("UpdateDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("UpdateTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e633e5a9-06b6-4442-ab4c-63436d35a0f4"),
                            CreateDate = new DateOnly(2025, 5, 27),
                            CreateTime = new TimeOnly(15, 23, 52, 784).Add(TimeSpan.FromTicks(6172)),
                            DateOfBirth = new DateOnly(1, 1, 1),
                            Email = "stoy@windowslive.com",
                            FirstName = "TOY",
                            IsActive = true,
                            LastName = "Serkan",
                            Password = "8TeA/OjdEFEz5rCvVGS5t+uAWUIblWHst4+tXSJ8GnA=",
                            PhoneNumber = "0(533) 656 30 95",
                            Salt = "System.Byte[]"
                        });
                });

            modelBuilder.Entity("tsp.Domain.Entities.SubCategory", b =>
                {
                    b.HasOne("tsp.Domain.Entities.Category", "Category")
                        .WithMany("SubCategory")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("tsp.Domain.Entities.Category", b =>
                {
                    b.Navigation("SubCategory");
                });
#pragma warning restore 612, 618
        }
    }
}
